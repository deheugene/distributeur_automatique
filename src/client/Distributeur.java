package client;


import com.sun.javacard.apduio.Apdu;
import com.sun.javacard.apduio.CadT1Client;
import com.sun.javacard.apduio.CadTransportException;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;

import service.Service;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * 
 * @author DEH EUGENE
 */
public class Distributeur extends javax.swing.JFrame {
	private static final long serialVersionUID = 1L;
	private int codeRt = 0;
	private int codeSo = 0;
	private int montant;
	private String codeSecret;
	Carte carte = null;
	byte[] appletAID = { (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04,
			(byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08, (byte) 0x09,
			(byte) 0x00, (byte) 0x00 };
	
	
	JFrame f;

	/* Constantes */
	public static final byte INS_SELECT = (byte) 0xA4;
	public static final byte CLA_ISO7816 = 0x00;
	public static final byte CLA_MONAPPLET = (byte) 0xB0;
	public static final byte INS_CREDITER_COMPTE = 0x10;
	public static final byte INS_DEBITER_COMPTE = 0x20;
	public static final byte INS_INTERROGER_SOLDE = 0x30;
	public static final byte INS_INTERROGER_NUM_COMPTE = 0x40;
	public static final byte INS_INTERROGER_NOM = 0x50;
	public static final byte INS_INTERROGER_PRENOM = 0x60;
	public static final byte INS_VERIFIER_CODE = 0x70;
	final static byte INS_INIT_SOLDE = 0x09;
	final static byte INS_BLOC_COMPTE = 0x07;
	final static byte MaxEssai_PIN = (byte) 0x03;
	final static byte MaxLg_PIN = (byte) 0x08;
	final static short SoldeNegatif_SW = (short) 0x6910;
	public static final int DEFAULT_PORT = 9025;
	private static final byte INS_DEBLOC_COMPTE = 0x06;

	/* attributs */
	private CadT1Client cad;
	public Socket sckCarte;
	private Apdu apdu;
	private javax.swing.JTextField textFieldMontant1;
	private int pass;
	private int iter = 1;

	/**
	 * Creates new form Client_javacard
	 */
	public Distributeur() throws IOException, CadTransportException {
		initialisation();
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	private void initComponents() {

		textFieldMontant1 = new javax.swing.JTextField();
		jPanel5 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		panelInfo = new javax.swing.JPanel();
		nomClient = new java.awt.Label();
		prenomClient = new java.awt.Label();
		numCompte = new java.awt.Label();
		jPanel3 = new javax.swing.JPanel();
		jPanel1 = new javax.swing.JPanel();
		panelSolde = new javax.swing.JPanel();
		label1 = new java.awt.Label();
		labelrendu = new java.awt.Label();
		labelAff = new javax.swing.JLabel();
		panelMontant = new javax.swing.JPanel();
		labelMontant = new java.awt.Label();
		textFieldMontant = new javax.swing.JTextField();
		labelDevise = new java.awt.Label();
		labelRendu = new java.awt.Label();
		panelNumerique = new javax.swing.JPanel();
		btn1 = new javax.swing.JButton();
		btn2 = new javax.swing.JButton();
		btn3 = new javax.swing.JButton();
		btn4 = new javax.swing.JButton();
		btn5 = new javax.swing.JButton();
		btn6 = new javax.swing.JButton();
		btn7 = new javax.swing.JButton();
		btn8 = new javax.swing.JButton();
		btn9 = new javax.swing.JButton();
		btn0 = new javax.swing.JButton();
		btnSuppr = new javax.swing.JButton();
		panelCommande = new javax.swing.JPanel();
		btnEchange = new javax.swing.JButton();
		btnRetrait = new javax.swing.JButton();
		btnSolde = new javax.swing.JButton();
		btnValider = new javax.swing.JButton();
		btnAnnuler = new javax.swing.JButton();
		btnQuitter = new javax.swing.JButton();

		javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(
				jPanel5);
		jPanel5.setLayout(jPanel5Layout);
		jPanel5Layout.setHorizontalGroup(jPanel5Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 100,
				Short.MAX_VALUE));
		jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 100,
				Short.MAX_VALUE));

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Terminal");
		jPanel2.setBackground(new java.awt.Color(0, 0, 0));

		panelInfo.setBackground(new java.awt.Color(0, 0, 0));

		nomClient.setBackground(new java.awt.Color(0, 0, 0));
		nomClient.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		nomClient.setForeground(new java.awt.Color(255, 255, 255));
		nomClient.setText("Nom client         :");

		prenomClient.setBackground(new java.awt.Color(0, 0, 0));
		prenomClient.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		prenomClient.setForeground(new java.awt.Color(255, 255, 255));
		prenomClient.setText("Prénom client   :");

		numCompte.setBackground(new java.awt.Color(0, 0, 0));
		numCompte.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		numCompte.setForeground(new java.awt.Color(255, 255, 255));
		numCompte.setText("Numéro compte :");

		labelNumCompte.setBackground(new java.awt.Color(0, 0, 0));
		labelNumCompte.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		labelNumCompte.setForeground(new java.awt.Color(255, 255, 255));
		// labelNumCompte.setText("label1");

		labelNomClient.setBackground(new java.awt.Color(0, 0, 0));
		labelNomClient.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		labelNomClient.setForeground(new java.awt.Color(255, 255, 255));
		// labelNomClient.setText("label2");

		labelPrenomClient.setBackground(new java.awt.Color(0, 0, 0));
		labelPrenomClient.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		labelPrenomClient.setForeground(new java.awt.Color(255, 255, 255));
		// labelPrenomClient.setText("label3");

		javax.swing.GroupLayout panelInfoLayout = new javax.swing.GroupLayout(
				panelInfo);
		panelInfo.setLayout(panelInfoLayout);
		panelInfoLayout
				.setHorizontalGroup(panelInfoLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								panelInfoLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												panelInfoLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																numCompte,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																nomClient,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																prenomClient,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												panelInfoLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING,
																false)
														.addComponent(
																labelNomClient,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																368,
																Short.MAX_VALUE)
														.addComponent(
																labelPrenomClient,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addComponent(
																labelNumCompte,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));
		panelInfoLayout
				.setVerticalGroup(panelInfoLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								panelInfoLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												panelInfoLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING)
														.addComponent(
																numCompte,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																labelNumCompte,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												panelInfoLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																nomClient,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																labelNomClient,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(12, 12, 12)
										.addGroup(
												panelInfoLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																prenomClient,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																labelPrenomClient,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));

		jPanel3.setBackground(new java.awt.Color(255, 255, 255));

		jPanel1.setBackground(new java.awt.Color(0, 0, 0));

		panelSolde.setBackground(new java.awt.Color(0, 0, 0));

		label1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
		label1.setForeground(new java.awt.Color(255, 255, 255));
		label1.setText("Solde : 250 FCFA");
		label1.setVisible(false);

		labelrendu.setAlignment(java.awt.Label.CENTER);
		labelrendu.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
		labelrendu.setForeground(new java.awt.Color(255, 255, 255));
		labelrendu.setText("label2");
		labelrendu.setVisible(false);

		labelAff.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
		labelAff.setForeground(new java.awt.Color(255, 255, 255));
		labelAff.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		labelAff.setText("Choisir votre une opération");

		javax.swing.GroupLayout panelSoldeLayout = new javax.swing.GroupLayout(
				panelSolde);
		panelSolde.setLayout(panelSoldeLayout);
		panelSoldeLayout
				.setHorizontalGroup(panelSoldeLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								panelSoldeLayout
										.createSequentialGroup()
										.addComponent(
												label1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												0, Short.MAX_VALUE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												labelAff,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												470,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												labelrendu,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												0, Short.MAX_VALUE)));
		panelSoldeLayout
				.setVerticalGroup(panelSoldeLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								panelSoldeLayout
										.createSequentialGroup()
										.addComponent(
												labelAff,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												41,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												label1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addComponent(
												labelrendu,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												20,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap()));

		labelAff.getAccessibleContext().setAccessibleName("");

		panelMontant.setBackground(new java.awt.Color(255, 51, 0));

		labelMontant.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
		labelMontant.setForeground(new java.awt.Color(255, 255, 255));
		labelMontant.setText("Montant");

		textFieldMontant.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		textFieldMontant.setEditable(false);
		textFieldMontant.setFocusable(false);
		labelDevise.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
		labelDevise.setForeground(new java.awt.Color(255, 255, 255));
		labelDevise.setText("FCFA");

		javax.swing.GroupLayout panelMontantLayout = new javax.swing.GroupLayout(
				panelMontant);
		panelMontant.setLayout(panelMontantLayout);
		panelMontantLayout
				.setHorizontalGroup(panelMontantLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								panelMontantLayout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(
												labelMontant,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												72,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(19, 19, 19)
										.addComponent(textFieldMontant)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												labelDevise,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(16, 16, 16)));
		panelMontantLayout
				.setVerticalGroup(panelMontantLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								panelMontantLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												panelMontantLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addComponent(
																labelMontant,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addComponent(
																textFieldMontant)
														.addComponent(
																labelDevise,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));
		panelMontant.setVisible(false);
		labelRendu.setAlignment(java.awt.Label.CENTER);
		labelRendu.setBackground(new java.awt.Color(0, 0, 0));
		labelRendu.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
		labelRendu.setForeground(new java.awt.Color(255, 255, 255));
		labelRendu.setVisible(false);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																labelRendu,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																0,
																Short.MAX_VALUE)
														.addComponent(
																panelMontant,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addComponent(
																panelSolde,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE))
										.addContainerGap()));
		jPanel1Layout
				.setVerticalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanel1Layout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(
												labelRendu,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												11, Short.MAX_VALUE)
										.addComponent(
												panelSolde,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												panelMontant,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(6, 6, 6)));

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(
				jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel3Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jPanel1,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE).addContainerGap()));
		jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel3Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jPanel1,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE).addContainerGap()));

		panelNumerique.setBackground(new java.awt.Color(0, 0, 0));
		panelNumerique.setVisible(false);

		btn1.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
		btn1.setText("1");
		btn1.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				frappeNum(1);
			}
		});

		btn2.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
		btn2.setText("2");
		btn2.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				frappeNum(2);
			}
		});

		btn3.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
		btn3.setText("3");
		btn3.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				frappeNum(3);
			}
		});

		btn4.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
		btn4.setText("4");
		btn4.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				frappeNum(4);
			}
		});

		btn5.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
		btn5.setText("5");
		btn5.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				frappeNum(5);
			}
		});

		btn6.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
		btn6.setText("6");
		btn6.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				frappeNum(6);
			}
		});

		btn7.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
		btn7.setText("7");
		btn7.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				frappeNum(7);
			}
		});

		btn8.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
		btn8.setText("8");
		btn8.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				frappeNum(8);
			}
		});

		btn9.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
		btn9.setText("9");
		btn9.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				frappeNum(9);
			}
		});

		btn0.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
		btn0.setText("0");
		btn0.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				frappeNum(0);
			}
		});

		btnSuppr.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
		btnSuppr.setText("Suppr");
		btnSuppr.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnSupprActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout panelNumeriqueLayout = new javax.swing.GroupLayout(
				panelNumerique);
		panelNumerique.setLayout(panelNumeriqueLayout);
		panelNumeriqueLayout
				.setHorizontalGroup(panelNumeriqueLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								panelNumeriqueLayout
										.createSequentialGroup()
										.addComponent(btn1)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(btn2)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(btn3)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(btn4)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(btn5)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(btn6)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(btn7)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												btn8,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												37,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(btn9)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												btn0,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												41,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												btnSuppr,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addContainerGap()));
		panelNumeriqueLayout.setVerticalGroup(panelNumeriqueLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(btn6, javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(btn7, javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(btn8, javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(btn5, javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(btn4, javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(btn3, javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(btn2, javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(btn1, javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(btn9, javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(btn0, javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(btnSuppr, javax.swing.GroupLayout.DEFAULT_SIZE,
						30, Short.MAX_VALUE));

		panelCommande.setBackground(new java.awt.Color(0, 0, 0));

		btnEchange.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		btnEchange.setText("Voir APDUs");
		btnEchange.setEnabled(true);
		btnEchange.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Service.echangeAPDU();
			}
		});

		btnRetrait.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		btnRetrait.setText("Retrait");
		btnRetrait.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnRetraitActionPerformed(evt);
			}
		});

		btnSolde.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		btnSolde.setText("Solde");
		btnSolde.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnSoldeActionPerformed(evt);
			}
		});

		btnValider.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		btnValider.setText("Valider");
		btnValider.setEnabled(false);
		btnValider.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					btnValiderActionPerformed(evt);
				} catch (IOException e) {
				} catch (CadTransportException e) {
				}
			}
		});

		btnAnnuler.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		btnAnnuler.setText("Annuler");
		btnAnnuler.setEnabled(false);
		btnAnnuler.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnAnnulerActionPerformed(evt);
			}
		});

		btnQuitter.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		btnQuitter.setText("Déconnexion");
		btnQuitter.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnQuitterActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout panelCommandeLayout = new javax.swing.GroupLayout(
				panelCommande);
		panelCommande.setLayout(panelCommandeLayout);
		panelCommandeLayout
				.setHorizontalGroup(panelCommandeLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								panelCommandeLayout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(btnEchange)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(btnRetrait)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(btnSolde)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(btnValider)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(btnAnnuler)
										.addGap(14, 14, 14)
										.addComponent(btnQuitter)
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));
		panelCommandeLayout
				.setVerticalGroup(panelCommandeLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								panelCommandeLayout
										.createSequentialGroup()
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addGroup(
												panelCommandeLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																btnEchange)
														.addComponent(
																btnRetrait)
														.addComponent(btnSolde)
														.addComponent(
																btnValider)
														.addComponent(
																btnAnnuler)
														.addComponent(
																btnQuitter))
										.addContainerGap()));

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(
				jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout
				.setHorizontalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel2Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel2Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																panelNumerique,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addComponent(
																jPanel3,
																javax.swing.GroupLayout.Alignment.TRAILING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addGroup(
																jPanel2Layout
																		.createSequentialGroup()
																		.addGroup(
																				jPanel2Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(
																								panelInfo,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								panelCommande,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addGap(0,
																				0,
																				Short.MAX_VALUE)))
										.addContainerGap()));
		jPanel2Layout
				.setVerticalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel2Layout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(
												panelInfo,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(18, 18, 18)
										.addComponent(
												jPanel3,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												28, Short.MAX_VALUE)
										.addComponent(
												panelNumerique,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												panelCommande,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap()));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		f = this;
		pack();
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
		setLocation(dim.width / 2 - this.getWidth() / 2,
				dim.height / 2 - this.getHeight() / 2);
	}// </editor-fold>

	private void frappeNum(int i) {
		if (pass == 0) {
			if (textFieldMontant.getText().length() < 10) {
				int x = textFieldMontant.getCaretPosition();
				textFieldMontant.setText(textFieldMontant.getText().substring(
						0, x)
						+ i
						+ textFieldMontant.getText().substring(x,
								(textFieldMontant.getText().length())));
				textFieldMontant.setCaretPosition(x + 1);
			} else {
			}
		} else {
			if (textFieldMontant.getText().length() < 10) {
				int x = textFieldMontant.getCaretPosition();
				textFieldMontant1.setText(textFieldMontant1.getText()
						.substring(0, x)
						+ i
						+ textFieldMontant1.getText().substring(x,
								(textFieldMontant1.getText().length())));

				textFieldMontant.setText(textFieldMontant.getText().substring(
						0, x)
						+ "*"
						+ textFieldMontant.getText().substring(x,
								(textFieldMontant.getText().length())));
				textFieldMontant.setCaretPosition(x + 1);
			} else {
			}
		}
	}

	private void btnRetraitActionPerformed(java.awt.event.ActionEvent evt) {
		textFieldMontant.setText(null);
		textFieldMontant1.setText(null);
		montant = 0;
		codeSecret = null;
		btnRetrait.setEnabled(false);
		btnSolde.setEnabled(false);
		btnAnnuler.setEnabled(true);
		btnValider.setEnabled(true);
		btnQuitter.setEnabled(false);
		labelMontant.setText("Montant");
		labelDevise.setVisible(true);
		panelSolde.setVisible(false);
		panelMontant.setVisible(true);
		labelRendu.setText("Opération-> Retrait : Entrer le montant à débiter");
		pass = 0;
		labelRendu.setVisible(true);
		codeRt = 1;
		panelNumerique.setVisible(true);
		f.pack();
	}

	private void btnSoldeActionPerformed(java.awt.event.ActionEvent evt) {
		textFieldMontant.setText(null);
		textFieldMontant1.setText(null);
		montant = 0;
		codeSecret = null;
		labelMontant.setText("Code");
		labelDevise.setVisible(false);
		panelSolde.setVisible(false);
		btnSolde.setEnabled(false);
		panelMontant.setVisible(true);
		codeSo = 2;
		labelRendu.setText("Opération-> Consulter : Entrer votre code secret");
		pass = 1;
		labelRendu.setVisible(true);
		btnRetrait.setEnabled(false);
		btnAnnuler.setEnabled(true);
		btnValider.setEnabled(true);
		btnQuitter.setEnabled(false);
		panelNumerique.setVisible(true);
		f.pack();
	}

	private void btnValiderActionPerformed(java.awt.event.ActionEvent evt)
			throws IOException, CadTransportException {
		label1.setVisible(false);
		if (!textFieldMontant.getText().isEmpty() && codeRt == 1) {

			if (validerMontant(textFieldMontant.getText().trim()) == true) {
				montant = Integer.parseInt(textFieldMontant.getText());
				codeRt++;
				textFieldMontant.setText(null);
				labelMontant.setText("Code");
				labelDevise.setVisible(false);
				labelRendu
						.setText("Opération-> Consulter : Entrer le code secret");
				pass = 1;
				labelRendu.setVisible(true);
				panelSolde.setVisible(false);
				panelMontant.setVisible(true);
			} else {
				labelRendu.setText("Saisie non valide");
				labelRendu.setVisible(true);
			}

		} else {
			if (!textFieldMontant.getText().isEmpty() && codeRt == 2) {
				if (verifierCode(textFieldMontant1.getText().trim()) == true) {
					codeSecret = textFieldMontant1.getText();
					try {
						debiterCompte(montant, codeSecret);
					} catch (IOException ex) {
						Logger.getLogger(Distributeur.class.getName()).log(
								Level.SEVERE, null, ex);
					} catch (CadTransportException ex) {
						Logger.getLogger(Distributeur.class.getName()).log(
								Level.SEVERE, null, ex);
					}
					codeSecret = null;
					codeRt = 0;
				} else {
					essai = essai - 1;
					labelRendu.setText("code incorrect: il vous reste " + essai
							+ " tentative");
					labelRendu.setVisible(true);
					textFieldMontant.setText(null);
					if (essai == 0) {
						carte.bloquerCarte();
						bloquerCarte('b');
						carte2.bloquerCarte();
						verrou();
					}
				}
			}

		}

		if (!textFieldMontant.getText().isEmpty() && codeSo == 2) {
			if (essai > 0) {
				if (verifierCode(textFieldMontant1.getText().trim()) == true) {
					panelMontant.setVisible(false);
					labelRendu.setVisible(false);
					apdu.command[Apdu.CLA] = CLA_MONAPPLET;
					apdu.command[Apdu.P1] = 0x00;
					apdu.command[Apdu.P2] = 0x00;
					apdu.command[Apdu.INS] = INS_INTERROGER_SOLDE;
					apdu.setLc(0x00);
					apdu.setLe(0x00);
					Service.echange = Service.echange + "Echange N° " + iter
							+ " : APDU envoiyée " + apdu + "\n";
					cad.exchangeApdu(apdu);
					Service.echange = Service.echange + " APDU reçue " + apdu
							+ "\n\n";
					iter++;
					if (apdu.getStatus() != 0x9000) {
						System.out.println("Erreur : lecture code: "
								+ apdu.getStatus());
					} else {
						labelAff.setText("Solde actuel : "
								+ Service.hexToASCII(Service
										.byteArrayToHexString(apdu.dataOut, ":"))
								+ " FCA");
						panelSolde.setVisible(true);
						codeSo = 0;
						btnRetrait.setEnabled(true);
						btnSolde.setEnabled(true);
						btnQuitter.setEnabled(true);
						btnAnnuler.setEnabled(false);
						btnValider.setEnabled(false);
						panelNumerique.setVisible(false);
					}

				} else {
					essai = essai - 1;
					labelRendu.setText("code incorrect: il vous reste " + essai
							+ " tentative");
					labelRendu.setVisible(true);
					textFieldMontant.setText(null);
					if (essai == 0) {
						carte.bloquerCarte();
						bloquerCarte('b');
						carte2.bloquerCarte();
						verrou();
					}
				}

			} else {
				labelAff.setText("Votre carte est vérroullée");
				panelSolde.setVisible(false);
			}
		}
	}

	private boolean validerMontant(String text) {
		return text.matches("^[1-9][0-9]*$") && (Integer.parseInt(text) > 0);
	}

	private boolean verifierCode(String code) {
		return code.matches("^[0-9][0-9]*$") && code.equals(carte2.getCode());
	}

	private void btnAnnulerActionPerformed(java.awt.event.ActionEvent evt) {
		btnRetrait.setEnabled(true);
		btnSolde.setEnabled(true);
		btnQuitter.setEnabled(true);
		btnAnnuler.setEnabled(false);
		btnValider.setEnabled(false);
		codeSo = 0;
		codeRt = 0;
		panelMontant.setVisible(false);
		labelRendu.setVisible(false);
		labelAff.setText("Choisir votre une opération");
		panelSolde.setVisible(true);
		label1.setVisible(false);
		panelNumerique.setVisible(false);
		labelAff.setVisible(true);
		f.pack();
	}

	private void btnSupprActionPerformed(java.awt.event.ActionEvent evt) {

		if (pass == 0) {
			if (!textFieldMontant.getText().isEmpty()) {
				if (textFieldMontant.getText().length() >= 2) {
					textFieldMontant.setText(textFieldMontant.getText()
							.substring(0,
									textFieldMontant.getText().length() - 1));
				} else {
					textFieldMontant.setText(null);
				}
			}
		} else {
			if (!textFieldMontant1.getText().isEmpty()) {

				if (!textFieldMontant.getText().isEmpty()) {
					if (textFieldMontant.getText().length() >= 2) {
						textFieldMontant
								.setText(textFieldMontant.getText()
										.substring(
												0,
												textFieldMontant.getText()
														.length() - 1));
					} else {
						textFieldMontant.setText(null);
					}
				}

				if (textFieldMontant1.getText().length() >= 2) {
					textFieldMontant1.setText(textFieldMontant1.getText()
							.substring(0,
									textFieldMontant1.getText().length() - 1));
				} else {
					textFieldMontant1.setText(null);
				}
			}
		}

	}

	private void btnQuitterActionPerformed(ActionEvent evt) {
		/* Mise hors tension de la carte */
		try {
			cad.powerDown();
			System.out.println("Votre carte est maintenant hors tension");
			labelAff.setText("Carte hors tension :              Veuillez retirer");
			panelInfo.setVisible(false);
			btnRetrait.setEnabled(false);
			btnSolde.setEnabled(false);
			btnQuitter.setEnabled(false);
			btnAnnuler.setEnabled(false);
			btnValider.setEnabled(false);
			panelNumerique.setVisible(false);
			labelRendu.setVisible(false);
		} catch (Exception e) {
			System.out
					.println("Erreur lors de l'envoi de la commande Powerdown a la Javacard");
			return;
		}

	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Distributeur.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Distributeur.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Distributeur.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Distributeur.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				try {
					new Distributeur().setVisible(true);
				} catch (IOException ex) {
					Logger.getLogger(Distributeur.class.getName()).log(
							Level.SEVERE, null, ex);
				} catch (CadTransportException ex) {
					Logger.getLogger(Distributeur.class.getName()).log(
							Level.SEVERE, null, ex);
				}
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JButton btn0;
	private javax.swing.JButton btn1;
	private javax.swing.JButton btn2;
	private javax.swing.JButton btn3;
	private javax.swing.JButton btn4;
	private javax.swing.JButton btn5;
	private javax.swing.JButton btn6;
	private javax.swing.JButton btn7;
	private javax.swing.JButton btn8;
	private javax.swing.JButton btn9;
	private javax.swing.JButton btnAnnuler;
	private javax.swing.JButton btnEchange;
	private javax.swing.JButton btnQuitter;
	private javax.swing.JButton btnRetrait;
	private javax.swing.JButton btnSolde;
	private javax.swing.JButton btnSuppr;
	private javax.swing.JButton btnValider;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel5;
	private java.awt.Label label1;
	private javax.swing.JLabel labelAff;
	private java.awt.Label labelDevise;
	private java.awt.Label labelMontant;
	private java.awt.Label labelNomClient;
	private java.awt.Label labelNumCompte;
	private java.awt.Label labelPrenomClient;
	private java.awt.Label labelRendu;
	private java.awt.Label labelrendu;
	private java.awt.Label nomClient;
	private java.awt.Label numCompte;
	private javax.swing.JPanel panelCommande;
	private javax.swing.JPanel panelInfo;
	private javax.swing.JPanel panelMontant;
	private javax.swing.JPanel panelNumerique;
	private javax.swing.JPanel panelSolde;
	private java.awt.Label prenomClient;
	private javax.swing.JTextField textFieldMontant;
	private int essai = 3;
	private Carte carte2;

	private void initialisation() throws IOException, CadTransportException {
		carte = new Carte();
		carte2 = new Carte();
		apdu = new Apdu();
		labelNumCompte = new java.awt.Label();
		labelNomClient = new java.awt.Label();
		labelPrenomClient = new java.awt.Label();
		labelRendu = new java.awt.Label();
		/* Connexion a la Javacard */
		connexion();
		/* Mise sous tension de la carte */
		activerCarte();
		/**
		 * ******* Sélection de l'applet: Commande APDU de type SELECT ********
		 */
		selectAPDU(appletAID);
		/**
		 * * intérroger le numéro de compte **
		 */
		getCompte();
		/**
		 * * intérroger le nom du client **
		 */
		getNomClient();
		/**
		 * * intérroger le prénom du client **
		 */
		getPrenomClient();
		getSoldeClient();

		carte2.read(carte.getNumCompt());
		if (carte2 != null) {
			if (carte2.getEtat() != 0) {

				if (carte.authentifierCarte(carte2) == true) {
					if (carte.getSolde() != carte2.getSolde()) {
						carte.setSolde(carte2.getSolde());
						initSolde(carte.getSolde());
					}
					labelNumCompte.setText(carte.getNumCompt());
					labelNomClient.setText(carte.getNom());
					labelPrenomClient.setText(carte.getPrenom());
				} else {
					Service.erreur("Votre carte non authentifiée");
				}
			} else {
				verrou();
			}

		} else {
			Service.erreur("erreur de lecture de la BD");
		}
	}

	private void verrou() {
		Service.erreur("Votre carte est bloquée. veuillez contacter votre fournisseur");
	}

	private void debiterCompte(int montant2, String codeSecret2)
			throws IOException, CadTransportException {
		panelMontant.setVisible(false);
		// labelRendu.setVisible(false);
		panelSolde.setVisible(true);
		/**
		 * * Créditer le compte **
		 */
		if (essai > 0) {
			if (verifierCode(codeSecret2) == true) {
				apdu.command[Apdu.CLA] = CLA_MONAPPLET;
				apdu.command[Apdu.P1] = 0x00;
				apdu.command[Apdu.P2] = 0x00;
				apdu.command[Apdu.INS] = INS_INTERROGER_SOLDE;
				Service.echange = Service.echange + "Echange N° " + iter
						+ " : APDU envoiyée " + apdu + "\n";
				cad.exchangeApdu(apdu);
				Service.echange = Service.echange + " APDU reçue " + apdu
						+ "\n\n";
				iter++;
				if (apdu.getStatus() != 0x9000) {
					Service.erreur("Erreur consulter sole : status word "
							+ apdu.getStatus());
				} else {
					byte solde[] = new byte[0x7f];
					solde = apdu.dataOut;
					int solde1 = Integer.parseInt(Service.hexToASCII(Service
							.byteArrayToHexString(solde, ":")));

					if (solde1 >= montant) {
						solde1 = solde1 - montant;

						apdu.command[Apdu.CLA] = CLA_MONAPPLET;
						apdu.command[Apdu.P1] = 0x00;
						apdu.command[Apdu.P2] = 0x00;
						apdu.command[Apdu.INS] = INS_INIT_SOLDE;
						apdu.setDataIn(Service.hexStringToByteArray(Service
								.ASCIIToHex(Integer.toString(solde1))));
						Service.echange = Service.echange + "Echange N° "
								+ iter + " : APDU envoiyée " + apdu + "\n";
						cad.exchangeApdu(apdu);
						Service.echange = Service.echange + " APDU reçue "
								+ apdu + "\n\n";
						iter++;
						if (apdu.getStatus() != 0x9000) {
							Service.erreur("Erreur consulter sole : status word "
									+ apdu.getStatus());
						} else {
							carte2.setSolde(solde1);
							carte2.saveSolde();
							labelAff.setText("Transaction effectuée. Solde actuel: "
									+ solde1);
							// btnCrediter.setEnabled(true);
							btnRetrait.setEnabled(true);
							btnSolde.setEnabled(true);
							btnQuitter.setEnabled(true);
							btnAnnuler.setEnabled(false);
							btnValider.setEnabled(false);
							panelNumerique.setVisible(false);
							labelRendu.setVisible(false);
						}
					} else {
						labelRendu
								.setText("Impossible d'effectuer un retrait de ce montant : veuillez consulter votre solde");
						labelRendu.setVisible(true);
						labelAff.setVisible(false);
						btnValider.setEnabled(false);
					}

				}

			} else {
				essai = essai - 1;
				labelRendu.setText("code incorrect: il vous reste " + essai
						+ " tentative");
				labelRendu.setVisible(true);
				if (essai == 0) {
					carte.bloquerCarte();
					bloquerCarte('b');
					carte2.bloquerCarte();
					verrou();
				}
			}

		} else {
			labelAff.setText("Votre carte est vérroullée");
			panelSolde.setVisible(false);
		}
	}

	private void getNomClient() throws IOException, CadTransportException {
		apdu.command[Apdu.CLA] = CLA_MONAPPLET;
		apdu.command[Apdu.P1] = 0x00;
		apdu.command[Apdu.P2] = 0x00;
		apdu.command[Apdu.INS] = INS_INTERROGER_NOM;
		Service.echange = Service.echange + "Echange N° " + iter
				+ " : APDU envoiyée " + apdu + "\n";
		cad.exchangeApdu(apdu);
		Service.echange = Service.echange + " APDU reçue " + apdu + "\n\n";
		iter++;
		if (apdu.getStatus() != 0x9000) {
			Service.erreur("Erreur : lecture nom: " + apdu.getStatus());
		} else {
			carte.setNom(Service.hexToASCII(Service.byteArrayToHexString(
					apdu.dataOut, ":")));
		}

	}

	private void getPrenomClient() throws IOException, CadTransportException {
		apdu.command[Apdu.CLA] = CLA_MONAPPLET;
		apdu.command[Apdu.P1] = 0x00;
		apdu.command[Apdu.P2] = 0x00;
		apdu.command[Apdu.INS] = INS_INTERROGER_PRENOM;
		Service.echange = Service.echange + "Echange N° " + iter
				+ " : APDU envoiyée " + apdu + "\n";
		cad.exchangeApdu(apdu);
		Service.echange = Service.echange + " APDU reçue " + apdu + "\n\n";
		iter++;
		if (apdu.getStatus() != 0x9000) {
			Service.erreur("Erreur : erreur lecture prenom: "
					+ apdu.getStatus());
		} else {
			carte.setPrenom(Service.hexToASCII(Service.byteArrayToHexString(
					apdu.dataOut, ":")));
		}

	}

	private void getSoldeClient() throws NumberFormatException, IOException,
			CadTransportException {
		apdu.command[Apdu.CLA] = CLA_MONAPPLET;
		apdu.command[Apdu.P1] = 0x00;
		apdu.command[Apdu.P2] = 0x00;
		apdu.command[Apdu.INS] = INS_INTERROGER_SOLDE;
		Service.echange = Service.echange + "Echange N° " + iter
				+ " : APDU envoiyée " + apdu + "\n";
		cad.exchangeApdu(apdu);
		Service.echange = Service.echange + " APDU reçue " + apdu + "\n\n";
		iter++;
		if (apdu.getStatus() != 0x9000) {
			Service.erreur("Erreur consulter sole : status word "
					+ apdu.getStatus());
		} else {
			byte solde[] = new byte[0x7f];
			solde = apdu.dataOut;
			carte.setSolde(Integer.parseInt(Service.hexToASCII(Service
					.byteArrayToHexString(solde, ":"))));
		}
	}

	private void selectAPDU(byte[] appletAID2) throws IOException,
			CadTransportException {
		apdu.command[Apdu.CLA] = CLA_ISO7816;
		apdu.command[Apdu.INS] = INS_SELECT;
		apdu.command[Apdu.P1] = 0x04;
		apdu.command[Apdu.P2] = 0x00;
		apdu.setDataIn(appletAID2);
		Service.echange = Service.echange + "Echange N° " + iter
				+ " : APDU envoiyée " + apdu + "\n";
		cad.exchangeApdu(apdu);
		Service.echange = Service.echange + " APDU reçue " + apdu + "\n\n";
		iter++;
		
		if (apdu.getStatus() != 0x9000) {
			Service.erreur("Erreur lors de la sélection de l'applet : Status="
					+ apdu.getStatus());
		}else{System.out.println("Applet sélectionné");}

	}

	private void activerCarte() {
		try {
			cad.powerUp();
			System.out.println("Carte mise sous tension");
		} catch (Exception e) {
			Service.erreur("Erreur lors de l'envoi de la commande Powerup a la Javacard");
			return;
		}

	}

	private void connexion() {
		try {
			sckCarte = new Socket("localhost", DEFAULT_PORT);
			sckCarte.setTcpNoDelay(true);
			BufferedInputStream input = new BufferedInputStream(
					sckCarte.getInputStream());
			BufferedOutputStream output = new BufferedOutputStream(
					sckCarte.getOutputStream());
			cad = new CadT1Client(input, output);
			System.out.println("Connexion établie à la carte");
		} catch (Exception e) {
			Service.erreur("Erreur : Veuillez lancer l'application java card");
		}

	}

	private void getCompte() throws UnsupportedEncodingException {
		apdu.command[Apdu.CLA] = CLA_MONAPPLET;
		apdu.command[Apdu.P1] = 0x00;
		apdu.command[Apdu.P2] = 0x00;
		apdu.command[Apdu.INS] = INS_INTERROGER_NUM_COMPTE;
		try {
			Service.echange = Service.echange + "Echange N° " + iter
					+ " : APDU envoiyée " + apdu + "\n";
			cad.exchangeApdu(apdu);
			Service.echange = Service.echange + " APDU reçue " + apdu + "\n\n";
			iter++;
		} catch (IOException e) {
		} catch (CadTransportException e) {
			Service.erreur(e.getMessage());
		}
		if (apdu.getStatus() != 0x9000) {
			Service.erreur("Erreur : lecture compte: " + apdu.getStatus());
		} else {

			carte.setNumCompt(Service.hexToASCII(Service.byteArrayToHexString(
					apdu.dataOut, ":")));
		}
	}

	private void initSolde(int solde1) throws IOException,
			CadTransportException {
		apdu.command[Apdu.CLA] = CLA_MONAPPLET;
		apdu.command[Apdu.P1] = 0x00;
		apdu.command[Apdu.P2] = 0x00;
		apdu.command[Apdu.INS] = INS_INIT_SOLDE;
		apdu.setDataIn(Service.hexStringToByteArray(Service.ASCIIToHex(Integer
				.toString(solde1))));
		Service.echange = Service.echange + "Echange N° " + iter
				+ " : APDU envoiyée " + apdu + "\n";
		cad.exchangeApdu(apdu);
		Service.echange = Service.echange + " APDU reçue " + apdu + "\n\n";
		iter++;
		if (apdu.getStatus() != 0x9000) {
			Service.erreur("Erreur initSolde ooo : status word "
					+ apdu.getStatus());
		} else {
			labelRendu.setText("Carte synchronisée avec la base de données");
			labelRendu.setVisible(true);
		}
	}

	private void bloquerCarte(char c) throws IOException, CadTransportException {
		apdu.command[Apdu.CLA] = CLA_MONAPPLET;
		apdu.command[Apdu.P1] = 0x00;
		apdu.command[Apdu.P2] = 0x00;
		if (c == 'b') {
			apdu.command[Apdu.INS] = INS_BLOC_COMPTE;
		}
		if (c == 'd') {
			apdu.command[Apdu.INS] = INS_DEBLOC_COMPTE;
		}
		Service.echange = Service.echange + "Echange N° " + iter
				+ " : APDU envoiyée " + apdu + "\n";
		cad.exchangeApdu(apdu);
		Service.echange = Service.echange + " APDU reçue " + apdu + "\n\n";
		iter++;
		if (apdu.getStatus() != 0x9000) {
			Service.erreur("Erreur blocker carte : status word different de 0x9000");
		} else {
			labelRendu
					.setText("Votre carte est blocqueée contacter votre fournisseur");
			labelRendu.setVisible(true);
		}

	}

}
